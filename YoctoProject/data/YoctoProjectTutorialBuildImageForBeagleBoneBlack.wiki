++ Yocto Project Tutorial Build Image For Beagle Bone Black



+++ SUMMARY

- properly set the target [MACHINE] variable in conf/local.conf
- generate core-image-minimal for target


For details related to BeagleBoneBlack:
  BeagleBoneBlackBootingProcess

+++ DETAILS


+++ Step 0: Download the Poky Source code, install dependencies

$ git clone git://git.yoctoproject.org/poky


I had to install a few dependencies per error message:
sudo apt-get install -y chrpath diffstat gawk

+++ Step 1: Checkout the latest branch/release,

You may need to 

$ git checkout dunfell 

Ensure you have the correct branch

+++ STEP 2:  SETUP BUILD ENVIRONMENT, SELECT HARDWARE TARGET
source oe-init-build-env build_bbb
 
modify default local.conf 
  - MACHINE ?= "beaglebone-yocto"

good practice after local.conf updates:
  
1. **Clean previous build**:
   - `bitbake -c cleanall <target>`
2. **Reconfigure environment**:
   - `source oe-init-build-env`
3. **Update dependencies**:
   - `bitbake -k <target>`
4. **Check and resolve any conflicts**:
   - `bitbake -c cleanall <target>`



+++ STEP 3: BUILD IMAGE
time bitbake core-image-minimal

output images ready at tmp/deploy/images/beaglebone-yocto/
    first-level bootloader MLO,
    second-level bootloader u-boot,
    kernel image,
    device tree blobs,
    a root filesystem archive, and
    a modules archive.

I ran into a compile failure with binutils, and ran this to resolve:
  bitbake -c clean binutils
  bitbake binutils


 
+++ STEP 4: Creating partitions and formatting the SD card

0. Connect an SD card, run lsblk

1. Unmount any mounted partition, using the umount command:
$  umount /dev/sdb1

Delete old partitions:
$ sudo fdisk /dev/sdb
Command (m for help): d
Selected partition 1

3. Create new partition called BOOT of 32 MB and type primary:

Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): 
Using default response p
Partition number (1-4, default 1): 
Using default value 1
First sector (2048-7774207, default 2048): 
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-7774207, default 7774207): +32M

4. Create a second partition to hold rootfs. We will give all the remaining space to this partition:

Command (m for help): n
Partition type:
   p   primary (1 primary, 0 extended, 3 free)
   e   extended
Select (default p): 
Using default response p
Partition number (1-4, default 2): 
Using default value 2
First sector (67584-7774207, default 67584): 
Using default value 67584
Last sector, +sectors or +size{K,M,G} (67584-7774207, default 7774207): 
Using default value 7774207

5. Make the first partition bootable by setting the boot flag:

Command (m for help): a
Partition number (1-4): 1

6. Set the first partition as WIN95 FAT32 (LBA):

Command (m for help): t Selected partition 1 Hex code (type L to list codes): c

7. We are done with the filesystem modification. So, let's write it by issuing the w command:

Command (m for help): w
The partition table has been altered!
Calling ioctl() to re-read partition table.
Syncing disks.

Tip
Do not forget to set the first partition as WIN95 FAT32 (LBA); otherwise, BeagleBone won't be able to boot from it. In this case, you might end up wasting time figuring out what's going wrong.

8. Format the first partition as FAT, using the following command. We will set the label as BOOT so that we know what directory it will be mounted to by udisks:

$  sudo mkfs.vfat -n "BOOT" /dev/sdb1

9. Format the second partition as an ext4 filesystem, using the following command. The label for this is set to ROOT, as it will contain the extracted image of rootfs.

$  sudo mkfs.ext4 -L "ROOT" /dev/sdb2

 
Copying images to the card
=============================

We have formatted our card, according to the requirements. 

 Now, we are ready to populate images to it. 

The partitions are usually auto mounted under /media/$USER

If not, we can use the mount command to mount the partition to our desired location:

$ sudo mount /dev/sdb1 /media/$USER/BOOT
$ sudo mount /dev/sdb2 /media/$USER/ROOT

Now, follow these steps to copy images to the card:

1. Copy the u-boot MLO and u-boot bootloader images into the FAT32 partition:

$ sudo cp MLO /media/$USER/BOOT
$ sudo cp u-boot.img /media/$USER/BOOT

2. Copy the kernel image into the boot partition:


$ sudo cp zImage /media/$USER/BOOT 


3. Copy the .dtb file, am335x-boneblack.dtb, into the boot partition. This step is required only in the case of core-image-minimal. It is not required in our case, as we created core-image-sato, which already has this file placed at the desired location in rootfs:

$ sudo cp am335x-boneblack.dtb /media/$USER/BOOT 

4. As a root user, uncompress core-image-sato-beaglebone.tar.bz2 to the ext4 partition:

$ sudo tar -xf core-image-minimal-beaglebone-yocto.tar.bz2 -C /media/$USER/ROOT/
5. Unmount both partitions:

$ sudo umount /dev/mmcblk0p1
$ sudo umount /dev/mmcblk0p2

Remove the card from the host machine, and insert it into the SD card slot on BeagleBone Black.


+++ PARENT
YoctoProjectWorkflow
YoctoProject